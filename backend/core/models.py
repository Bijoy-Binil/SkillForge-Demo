from django.db import models
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.utils.translation import gettext_lazy as _


class UserManager(BaseUserManager):
    """Define a model manager for User model with email as the unique identifier."""

    def create_user(self, email, password=None, **extra_fields):
        """Create and save a User with the given email and password."""
        if not email:
            raise ValueError(_('The Email must be set'))
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, email, password, **extra_fields):
        """Create and save a SuperUser with the given email and password."""
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError(_('Superuser must have is_staff=True.'))
        if extra_fields.get('is_superuser') is not True:
            raise ValueError(_('Superuser must have is_superuser=True.'))
        return self.create_user(email, password, **extra_fields)


class User(AbstractUser):
    """Custom user model that uses email as the unique identifier."""
    
    username = None
    email = models.EmailField(_('email address'), unique=True)
    bio = models.TextField(blank=True)
    profile_image = models.ImageField(upload_to='profile_images/', blank=True, null=True)
    date_joined = models.DateTimeField(auto_now_add=True)
    github_username = models.CharField(max_length=100, blank=True, null=True)
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']
    
    objects = UserManager()
    
    def __str__(self):
        return self.email


class Skill(models.Model):
    """Skills that users can learn and track."""
    
    name = models.CharField(max_length=100)
    description = models.TextField()
    category = models.CharField(max_length=50)
    difficulty_level = models.IntegerField(default=1)  # 1-5 scale
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    # Added fields for GitHub API integration
    is_github_skill = models.BooleanField(default=False)
    github_language_name = models.CharField(max_length=100, blank=True, null=True)
    
    def __str__(self):
        return self.name


class LearningPath(models.Model):
    """A sequence of skills forming a learning path."""
    
    title = models.CharField(max_length=200)
    description = models.TextField()
    skills = models.ManyToManyField(Skill, through='PathSkill')
    creator = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_paths')
    users = models.ManyToManyField(User, through='ProgressTracker', related_name='enrolled_paths')
    estimated_hours = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    # New field to track if this was generated by AI
    is_ai_generated = models.BooleanField(default=False)
    
    def __str__(self):
        return self.title


class PathSkill(models.Model):
    """Intermediary model for ordering skills in a learning path."""
    
    learning_path = models.ForeignKey(LearningPath, on_delete=models.CASCADE)
    skill = models.ForeignKey(Skill, on_delete=models.CASCADE)
    order = models.IntegerField()
    estimated_hours = models.IntegerField(default=1)
    
    class Meta:
        ordering = ['order']
        unique_together = ['learning_path', 'order']
    
    def __str__(self):
        return f"{self.learning_path.title} - {self.skill.name} (Order: {self.order})"


class ProgressTracker(models.Model):
    """Track user progress through learning paths."""
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    learning_path = models.ForeignKey(LearningPath, on_delete=models.CASCADE)
    current_skill = models.ForeignKey(PathSkill, on_delete=models.SET_NULL, null=True, blank=True)
    progress_percentage = models.FloatField(default=0.0)
    started_at = models.DateTimeField(auto_now_add=True)
    last_activity = models.DateTimeField(auto_now=True)
    completed = models.BooleanField(default=False)
    completed_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        unique_together = ['user', 'learning_path']
    
    def __str__(self):
        return f"{self.user.email} - {self.learning_path.title} ({self.progress_percentage}%)"


class JobMatch(models.Model):
    """Job opportunities matched to user skills."""
    
    title = models.CharField(max_length=200)
    company = models.CharField(max_length=100)
    description = models.TextField()
    location = models.CharField(max_length=100)
    skills_required = models.ManyToManyField(Skill)
    experience_level = models.CharField(max_length=50)
    salary_range = models.CharField(max_length=100, blank=True)
    application_url = models.URLField()
    posted_at = models.DateTimeField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.title} at {self.company}"


class ResumeData(models.Model):
    """User resume data for job matching."""
    
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='resume')
    title = models.CharField(max_length=200)
    summary = models.TextField()
    experience = models.TextField()
    education = models.TextField()
    skills = models.ManyToManyField(Skill, related_name='resumes')
    certifications = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Resume for {self.user.email}"


class GithubProfile(models.Model):
    """Stores GitHub profile data for a user."""
    
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='github_profile')
    username = models.CharField(max_length=100)
    name = models.CharField(max_length=200, blank=True, null=True)
    avatar_url = models.URLField(blank=True, null=True)
    html_url = models.URLField(blank=True, null=True)
    public_repos = models.IntegerField(default=0)
    followers = models.IntegerField(default=0)
    following = models.IntegerField(default=0)
    bio = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(null=True, blank=True)
    last_updated = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"GitHub: {self.username}"


class GithubLanguage(models.Model):
    """Represents a programming language used by a user on GitHub."""
    
    github_profile = models.ForeignKey(GithubProfile, on_delete=models.CASCADE, related_name='languages')
    name = models.CharField(max_length=100)
    bytes = models.BigIntegerField(default=0)
    percentage = models.FloatField(default=0.0)
    skill = models.ForeignKey(Skill, on_delete=models.SET_NULL, null=True, blank=True, related_name='github_languages')
    
    class Meta:
        unique_together = ['github_profile', 'name']
    
    def __str__(self):
        return f"{self.github_profile.username} - {self.name} ({self.percentage:.1f}%)"


class GithubRepository(models.Model):
    """Represents a GitHub repository of a user."""
    
    github_profile = models.ForeignKey(GithubProfile, on_delete=models.CASCADE, related_name='repositories')
    repo_id = models.BigIntegerField()
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True, null=True)
    html_url = models.URLField()
    primary_language = models.CharField(max_length=100, blank=True, null=True)
    stargazers_count = models.IntegerField(default=0)
    forks_count = models.IntegerField(default=0)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    
    class Meta:
        unique_together = ['github_profile', 'repo_id']
        ordering = ['-updated_at']
    
    def __str__(self):
        return f"{self.github_profile.username}/{self.name}"


# New models for learning modules and progress tracking

class LearningModule(models.Model):
    """Individual learning modules within a learning path."""
    
    TYPE_CHOICES = (
        ('video', 'Video'),
        ('article', 'Article'),
        ('exercise', 'Exercise'),
        ('quiz', 'Quiz'),
    )
    
    learning_path = models.ForeignKey(LearningPath, on_delete=models.CASCADE, related_name='modules')
    title = models.CharField(max_length=200)
    description = models.TextField()
    module_type = models.CharField(max_length=20, choices=TYPE_CHOICES)
    url = models.URLField()
    estimated_hours = models.FloatField(default=1.0)
    order = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['order']
        unique_together = ['learning_path', 'order']
    
    def __str__(self):
        return f"{self.learning_path.title} - {self.title}"


class ModuleProgress(models.Model):
    """Track user progress for individual learning modules."""
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='module_progress')
    module = models.ForeignKey(LearningModule, on_delete=models.CASCADE, related_name='progress')
    is_completed = models.BooleanField(default=False)
    time_spent_minutes = models.IntegerField(default=0)
    started_at = models.DateTimeField(auto_now_add=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    notes = models.TextField(blank=True, null=True)
    
    class Meta:
        unique_together = ['user', 'module']
    
    def __str__(self):
        status = "Completed" if self.is_completed else "In Progress"
        return f"{self.user.email} - {self.module.title} ({status})"


class LearningSession(models.Model):
    """Track individual learning sessions for analytics."""
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='learning_sessions')
    module = models.ForeignKey(LearningModule, on_delete=models.CASCADE, related_name='sessions')
    date = models.DateField(auto_now_add=True)
    duration_minutes = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.user.email} - {self.module.title} - {self.date} ({self.duration_minutes} min)"


class Progress(models.Model):
    """Track user progress through learning modules."""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='progress')
    module = models.ForeignKey(LearningModule, on_delete=models.CASCADE, related_name='progress')
    completed = models.BooleanField(default=False)
    time_spent_minutes = models.IntegerField(default=0)
    completed_at = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['user', 'module']
        ordering = ['-updated_at']

    def __str__(self):
        return f"{self.user.email} - {self.module.title} ({'Completed' if self.completed else 'In Progress'})"
